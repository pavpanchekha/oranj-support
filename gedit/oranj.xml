<?xml version="1.0" encoding="UTF-8"?>

<language id="or" _name="oranj" version="2.0" _section="Sources">
    <metadata>
        <property name="mimetypes">text/x-oranj;application/x-oranj</property>
        <property name="line-comment-start">#</property>
        <property name="globs">*.py</property>
    </metadata>
    
    <styles>
        <style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
        <style id="multiline-string"  _name="Multiline string"      map-to="def:string"/>
        <style id="string"            _name="String"                map-to="def:string"/>
        <style id="escaped-char"      _name="Escaped Character"     map-to="def:special-char"/>
        <style id="format"            _name="Format"                map-to="def:character"/>
        <style id="string-conversion" _name="string-conversion"/>
        <style id="special-variable"  _name="Special Variable"      map-to="def:identifier"/>
        <style id="boolean"           _name="Boolean"               map-to="def:boolean"/>
        <style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
        <style id="decimal"           _name="Decimal number"        map-to="def:decimal"/>
        <style id="base-n-integer"    _name="Base-N number"         map-to="def:base-n-integer"/>
        <style id="builtin-constant"  _name="Builtin Constant"      map-to="def:special-constant"/>
        <style id="builtin-object"    _name="Builtin Object"        map-to="def:type"/>
        <style id="builtin-function"  _name="Builtin Function"      map-to="def:builtin"/>
        <style id="procdir"           _name="Processing Directive" map-to="def:preprocessor" />
        <style id="procblock"         _name="Processing Directive" map-to="def:preprocessor" />
    </styles>

    <definitions>
        <define-regex id="identifier">[_a-zA-Z\$][_a-zA-Z0-9\$]*</define-regex>
        <define-regex id="number">[1-9][0-9]*</define-regex>

        <!-- http://docs.python.org/lib/typesseq-strings.html -->
        <context id="format" style-ref="format" extend-parent="false">
          <match extended="true">
            %                       # leading % sign
            \(\%{identifier}\)?     # mapping key
            [#0\-\ \+]*             # conversion flags
            (\-?\%{number}|\*)?     # minimum field width
            (\.(\-?\%{number}|\*))? # precision
            (hlL)?                  # lentgh modifier
            [diouxXeEfFgGcrs%]      # conversion type
          </match>
        </context>

        <!-- http://docs.python.org/ref/strings.html -->
        <context id="escaped-char" style-ref="escaped-char" extend-parent="true">
          <match extended="true">
            \\(                 # leading backslash
            [\\'"abfnrtv]     | # single escaped char
            N\{[A-Z\ ]+\}     | # named unicode character
            u[0-9A-Fa-f]{4}   | # xxxx - character with 16-bit hex value xxxx
            U[0-9A-Fa-f]{8}   | # xxxxxxxx - character with 32-bit hex value xxxxxxxx
            x[0-9A-Fa-f]{1,2} | # \xhh - character with hex value hh
            [0-7]{1,3}          # \ooo - character with octal value ooo
            )
          </match>
        </context>

        <define-regex id="string-prefix">\w*</define-regex>
        <define-regex id="raw-string-prefix">\w*r\w*</define-regex>

        <context id="multiline-double-quoted-string" style-ref="multiline-string">
            <start>\%{string-prefix}"""</start>
            <end>"""</end>
            <include>
                <context ref="format"/>
                <context ref="escaped-char"/>
            </include>
        </context>

        <context id="multiline-single-quoted-string" style-ref="multiline-string">
            <start>\%{string-prefix}'''</start>
            <end>'''</end>
            <include>
                <context ref="format"/>
                <context ref="escaped-char"/>
            </include>
        </context>

        <context id="double-quoted-string" style-ref="string" end-at-line-end="true">
            <start>\%{string-prefix}"</start>
            <end>"</end>
            <include>
                <context ref="format"/>
                <context ref="escaped-char"/>
                <context ref="def:line-continue"/>
            </include>
        </context>

        <context id="single-quoted-string" style-ref="string" end-at-line-end="true">
            <start>\%{string-prefix}'</start>
            <end>'</end>
            <include>
                <context ref="format"/>
                <context ref="escaped-char"/>
            <context ref="def:line-continue"/>
            </include>
        </context>

        <context id="multiline-double-quoted-raw-string" style-ref="multiline-string">
            <start>\%{raw-string-prefix}"""</start>
            <end>"""</end>
            <include>
                <context ref="format"/>
            </include>
        </context>

        <context id="multiline-single-quoted-raw-string" style-ref="multiline-string">
            <start>\%{raw-string-prefix}'''</start>
            <end>'''</end>
            <include>
                <context ref="format"/>
            </include>
        </context>

        <context id="double-quoted-raw-string" style-ref="string" end-at-line-end="true">
            <start>\%{raw-string-prefix}"</start>
            <end>"</end>
            <include>
                <context ref="format"/>
                <context ref="def:line-continue"/>
            </include>
        </context>

        <context id="single-quoted-raw-string" style-ref="string" end-at-line-end="true">
            <start>\%{raw-string-prefix}'</start>
            <end>'</end>
            <include>
                <context ref="format"/>
                <context ref="def:line-continue"/>
            </include>
        </context>

        <context id="backtick-string" style-ref="string">
            <match>`[a-zA-Z0-9\$_]*</match>
        </context>

        <context id="procdir" style-ref="procdir" end-at-line-end="true">
            <start>#![a-zA-Z0-9_\-+]+</start>
            <include>
                <context ref="single-quoted-string" />
                <context ref="double-quoted-string" />
            </include>
        </context>

        <context id="procblock" style-ref="procdir" end-at-line-end="false">
            <start>#![a-zA-Z0-9_\-+]+ (\s[^\n\{\}]*)? \{</start>
            <end>#![ \t]*}</end>
        </context>

        <context id="or">
            <include>
                <context ref="def:shebang"/>
                <context ref="def:shell-like-comment"/>

                <context ref="multiline-double-quoted-string"/>
                <context ref="multiline-single-quoted-string"/>
                <context ref="double-quoted-string"/>
                <context ref="single-quoted-string"/>

                <context ref="multiline-double-quoted-raw-string"/>
                <context ref="multiline-single-quoted-raw-string"/>
                <context ref="double-quoted-raw-string"/>
                <context ref="single-quoted-raw-string"/>
                <context ref="backtick-string" />
        
                <context id="special-variables" style-ref="special-variable">
                    <prefix>(?&lt;![\w\.])</prefix>
                    <keyword>self</keyword>
                    <keyword>intp</keyword>
                    <keyword>this</keyword>
                </context>
        
                <context id="boolean" style-ref="boolean">
                    <prefix>(?&lt;![\w\.])</prefix>
                    <keyword>false</keyword>
                    <keyword>true</keyword>
                </context>
       
                <context id="int-hard" style-ref="base-n-integer">
                    <match>(?&lt;![\w\.]|\d)(?:0(?:\w))(?:(?:[ \t]*[0-9a-zA-Z])+)(?![ \t]*\.|\d|\w)</match>
                </context>

                <context id="int-simple" style-ref="base-n-integer">
                    <match>(?&lt;![\.eE]|\d)(?:(?:[ \t]*[0-9])+)(?![ \t]*\.|\d|\w)</match>
                </context>
        
                <context id="float" style-ref="floating-point">
                    <match>(?:(?:[ \t]*[0-9])+\.(?:[ \t]*[0-9])+)|(?:\.(?:[ \t]*[0-9])+)|(?:(?:[ \t]*[0-9])+\.)(?:[eE][+-]?(?:[ \t]*[0-9])*)?</match>
                </context>
                
                <context id="module-handler">
                    <keyword>import</keyword>
                    <keyword>with</keyword>
                    <keyword>as</keyword>
                </context>
        
                <context id="keyword" style-ref="keyword">
                    <keyword>catch</keyword>
                    <keyword>class</keyword>
                    <keyword>else</keyword>
                    <keyword>elif</keyword>
                    <keyword>finally</keyword>
                    <keyword>for</keyword>
                    <keyword>fn</keyword>
                    <keyword>yield</keyword>
                    <keyword>if</keyword>
                    <keyword>return</keyword>
                    <keyword>throw</keyword>
                    <keyword>try</keyword>
                    <keyword>while</keyword>
                    <keyword>with</keyword>
                    <keyword>del</keyword>
                    <keyword>extern</keyword>
                    <keyword>import</keyword>
                    <keyword>break</keyword>
                    <keyword>continue</keyword>
                    <keyword>assert</keyword>
                    <keyword>as</keyword>
                </context>
        
                <context id="builtin-constants" style-ref="builtin-constant">
                    <prefix>(?&lt;![\w\.\$])</prefix>
                    <keyword>nil</keyword>
                    <keyword>inf</keyword>
                </context>
        
                <context id="builtin-objects" style-ref="builtin-object">
                    <prefix>(?&lt;![\w\.\$])</prefix>
                    <keyword>Exception</keyword>
                    <keyword>io</keyword><!--
                    <keyword>ArithmeticError</keyword>
                    <keyword>AssertionError</keyword>
                    <keyword>AttributeError</keyword>
                    <keyword>EnvironmentError</keyword>
                    <keyword>EOFError</keyword>
                    <keyword>Exception</keyword>
                    <keyword>FloatingPointError</keyword>
                    <keyword>ImportError</keyword>
                    <keyword>IndentationError</keyword>
                    <keyword>IndexError</keyword>
                    <keyword>IOError</keyword>
                    <keyword>KeyboardInterrupt</keyword>
                    <keyword>KeyError</keyword>
                    <keyword>LookupError</keyword>
                    <keyword>MemoryError</keyword>
                    <keyword>NameError</keyword>
                    <keyword>NotImplementedError</keyword>
                    <keyword>OSError</keyword>
                    <keyword>OverflowError</keyword>
                    <keyword>ReferenceError</keyword>
                    <keyword>RuntimeError</keyword>
                    <keyword>StandardError</keyword>
                    <keyword>StopIteration</keyword>
                    <keyword>SyntaxError</keyword>
                    <keyword>SystemError</keyword>
                    <keyword>SystemExit</keyword>
                    <keyword>TabError</keyword>
                    <keyword>TypeError</keyword>
                    <keyword>UnboundLocalError</keyword>
                    <keyword>UnicodeDecodeError</keyword>
                    <keyword>UnicodeEncodeError</keyword>
                    <keyword>UnicodeError</keyword>
                    <keyword>UnicodeTranslateError</keyword>
                    <keyword>ValueError</keyword>
                    <keyword>WindowsError</keyword>
                    <keyword>ZeroDivisionError</keyword>
            
                    <keyword>Warning</keyword>
                    <keyword>UserWarning</keyword>
                    <keyword>DeprecationWarning</keyword>
                    <keyword>PendingDeprecationWarning</keyword>
                    <keyword>SyntaxWarning</keyword>
                    <keyword>OverflowWarning</keyword>
                    <keyword>RuntimeWarning</keyword>
                    <keyword>FutureWarning</keyword>-->
                </context>
        
                <context id="builtin-function" style-ref="builtin-function">
                    <prefix>(?&lt;![\w\.\$])</prefix>
                    <keyword>globals</keyword>
                    <keyword>locals</keyword>
                    <keyword>all</keyword>
                    <keyword>divmod</keyword>
                    <keyword>unicode</keyword>
                    <keyword>enumerate</keyword>
                    <keyword>zip</keyword>
                    <keyword>chr</keyword>
                    <keyword>dict</keyword>
                    <keyword>input</keyword>
                    <keyword>type</keyword>
                    <keyword>sort</keyword>
                    <keyword>exit</keyword>
                    <keyword>repr</keyword>
                    <keyword>odict</keyword>
                    <keyword>join</keyword>
                    <keyword>list</keyword>
                    <keyword>iter</keyword>
                    <keyword>str</keyword>
                    <keyword>error</keyword>
                    <keyword>output</keyword>
                    <keyword>round</keyword>
                    <keyword>dir</keyword>
                    <keyword>attrs</keyword>
                    <keyword>set</keyword>
                    <keyword>file</keyword>
                    <keyword>int</keyword>
                    <keyword>num</keyword>
                    <keyword>id</keyword>
                    <keyword>slice</keyword>
                    <keyword>min</keyword>
                    <keyword>sum</keyword>
                    <keyword>any</keyword>
                    <keyword>abs</keyword>
                    <keyword>bool</keyword>
                    <keyword>map</keyword>
                    <keyword>hash</keyword>
                    <keyword>max</keyword>
                    <keyword>len</keyword>
                    <keyword>callable</keyword>
                    <keyword>eval</keyword>
                    <keyword>ord</keyword>
                    <keyword>endl</keyword>
                    <keyword>reverse</keyword>
                    <keyword>filter</keyword>
                    <keyword>range</keyword>
                    <keyword>cmp </keyword>
                </context>
            </include>
        </context>
    </definitions>
</language>
            
